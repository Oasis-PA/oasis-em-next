generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Genero {
  id_genero Int       @id @default(autoincrement())
  nome      String    @unique
  sigla     String    @unique
  usuarios  Usuario[]
}

model TipoCabelo {
  id_tipo_cabelo Int       @id @default(autoincrement())
  nome           String    @unique
  descricao      String?
  usuarios       Usuario[]
  produtos       Produto[]
}

model Usuario {
  id_usuario      Int             @id @default(autoincrement())
  nome            String
  email           String          @unique
  telefone        String?
  senha           String
  data_nascimento DateTime?
  data_cadastro   DateTime        @default(now())
  id_genero       Int
  id_tipo_cabelo  Int?
  sobrenome       String?
  sobre           String?
  avaliacoes      Avaliacao[]
  favoritos       Favorito[]
  passwordResets  PasswordReset[]
  genero          Genero          @relation(fields: [id_genero], references: [id_genero])
  tipo_cabelo     TipoCabelo?     @relation(fields: [id_tipo_cabelo], references: [id_tipo_cabelo])
}

model Categoria {
  id_categoria Int       @id @default(autoincrement())
  nome         String    @unique
  descricao    String?
  produtos     Produto[]
}

model Produto {
  id_produto    Int          @id @default(autoincrement())
  nome          String
  descricao     String?
  marca         String
  preco         Float
  data_cadastro DateTime     @default(now())
  id_categoria  Int
  id_tag        Int?         // Chave estrangeira para Tag
  avaliacoes    Avaliacao[]
  favoritos     Favorito[]
  categoria     Categoria    @relation(fields: [id_categoria], references: [id_categoria])
  tag           Tag?         @relation(fields: [id_tag], references: [id_tag])
  url_imagem    String
  url_loja      String
  
  id_tipo_cabelo  Int? // O `?` torna este campo opcional, não quebrando dados existentes
  id_tipo_pele    Int? // O `?` torna este campo opcional

  tipo_cabelo     TipoCabelo? @relation(fields: [id_tipo_cabelo], references: [id_tipo_cabelo])
  tipo_pele       TipoPele?   @relation(fields: [id_tipo_pele], references: [id_tipo_pele])
}

model Avaliacao {
  id_avaliacao   Int      @id @default(autoincrement())
  nota           Int
  comentario     String?
  data_avaliacao DateTime @default(now())
  id_usuario     Int
  id_produto     Int
  produto        Produto  @relation(fields: [id_produto], references: [id_produto])
  usuario        Usuario  @relation(fields: [id_usuario], references: [id_usuario])
}

model Favorito {
  id_favorito     Int      @id @default(autoincrement())
  data_favoritado DateTime @default(now())
  id_usuario      Int
  id_produto      Int
  produto         Produto  @relation(fields: [id_produto], references: [id_produto])
  usuario         Usuario  @relation(fields: [id_usuario], references: [id_usuario])
}

model Tag {
  id_tag   Int       @id @default(autoincrement())
  nome     String    @unique
  produtos Produto[] // Relacionamento inverso
}

model PasswordReset {
  id          Int      @id @default(autoincrement())
  token       String   @unique
  usuario     Usuario  @relation(fields: [id_usuario], references: [id_usuario])
  id_usuario  Int
  expiresAt   DateTime
  createdAt   DateTime @default(now())
}

model Artigo {
  id           Int      @id @default(autoincrement())
  titulo       String
  slug         String   @unique
  conteudo     String
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model TipoPele {
  id_tipo_pele Int       @id @default(autoincrement())
  nome         String    @unique
  descricao    String?
  produtos     Produto[] // Relação de volta para a tabela Produto
}