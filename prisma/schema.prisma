generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider      = "prisma-zod-generator"
  output        = "../src/lib/zod-schemas"
  relationModel = "false"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Genero {
  id_genero Int       @id @default(autoincrement())
  nome      String    @unique
  sigla     String    @unique
  usuarios  Usuario[]
}

model TipoCabelo {
  id_tipo_cabelo Int       @id @default(autoincrement())
  nome           String    @unique
  descricao      String?
  produtos       Produto[]
  usuarios       Usuario[]
}

model Usuario {
  id_usuario      Int              @id @default(autoincrement())
  nome            String
  email           String           @unique
  telefone        String?
  senha           String
  data_nascimento DateTime?
  data_cadastro   DateTime         @default(now())
  id_genero       Int
  id_tipo_cabelo  Int?
  sobrenome       String?
  sobre           String?
  url_foto        String?          @db.VarChar
  avaliacoes      Avaliacao[]
  favoritos       Favorito[]
  FavoritoArtigo  FavoritoArtigo[]
  passwordResets  PasswordReset[]
  genero          Genero           @relation(fields: [id_genero], references: [id_genero])
  tipo_cabelo     TipoCabelo?      @relation(fields: [id_tipo_cabelo], references: [id_tipo_cabelo])
}

model Categoria {
  id_categoria Int       @id @default(autoincrement())
  nome         String    @unique
  descricao    String?
  produtos     Produto[]
}

model Produto {
  id_produto     Int             @id @default(autoincrement())
  nome           String
  marca          String
  preco          Float           @db.Real
  data_cadastro  DateTime        @default(now())
  id_categoria   Int
  descricao      String?
  id_tag         Int?
  id_tipo_pele   Int?
  id_tipo_cabelo Int?
  composicao     String?
  qualidades     String?
  mais_detalhes  String?
  url_imagem     String?         @db.VarChar(255)
  url_loja       String?         @db.VarChar(255)
  composicao     String?         @db.VarChar
  qualidades     String?         @db.VarChar
  mais_detalhes  String?         @db.VarChar
  avaliacoes     Avaliacao[]
  favoritos      Favorito[]
  ImagemProduto  ImagemProduto[]
  categoria      Categoria       @relation(fields: [id_categoria], references: [id_categoria])
  tag            Tag?            @relation(fields: [id_tag], references: [id_tag], onDelete: NoAction, onUpdate: NoAction)
  tipo_cabelo    TipoCabelo?     @relation(fields: [id_tipo_cabelo], references: [id_tipo_cabelo], onDelete: NoAction, onUpdate: NoAction)
}

model Avaliacao {
  id_avaliacao   Int      @id @default(autoincrement())
  nota           Int
  comentario     String?
  data_avaliacao DateTime @default(now())
  id_usuario     Int
  id_produto     Int
  produto        Produto  @relation(fields: [id_produto], references: [id_produto])
  usuario        Usuario  @relation(fields: [id_usuario], references: [id_usuario])
}

model Favorito {
  id_favorito     Int      @id @default(autoincrement())
  data_favoritado DateTime @default(now())
  id_usuario      Int
  id_produto      Int
  produto         Produto  @relation(fields: [id_produto], references: [id_produto])
  usuario         Usuario  @relation(fields: [id_usuario], references: [id_usuario])
}

model Tag {
  id_tag    Int         @id @default(autoincrement())
  nome      String      @unique
  ArtigoTag ArtigoTag[]
  produtos  Produto[]
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  id_usuario Int
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  usuario    Usuario  @relation(fields: [id_usuario], references: [id_usuario])
}

model Artigo {
  id             Int              @id @default(autoincrement())
  titulo         String           @default("NOT NULL")
  slug           String           @unique @default("NOT NULL")
  conteudo       String           @default("NOT NULL")
  criadoEm       DateTime         @default(now())
  atualizadoEm   DateTime         @updatedAt
  dataPublicacao DateTime?        @db.Timestamptz(6)
  resumo         String?
  imagemHeader   String?
  status         String?          @default("rascunho")
  ArtigoTag      ArtigoTag[]
  FavoritoArtigo FavoritoArtigo[]
}

model TipoPele {
  id_tipo_pele Int      @id @default(autoincrement())
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  nome         String?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Empresas {
  id                   Int      @id @default(autoincrement()) @db.SmallInt
  nome_sobrenome       String
  email_corporativo    String   @unique @default("")
  telefone             Decimal  @db.Decimal
  empresa_representada String   @db.VarChar
  total_colaboradores  Int
  cargo                String
  motivo_contato       String
  data_solicitacao     DateTime @db.Timestamptz(6)
  status               String
}

model ImagemProduto {
  id_imagem_produto Int     @id @default(autoincrement())
  id_produto        Int
  url_imagem        String
  ordem             Int?
  Produto           Produto @relation(fields: [id_produto], references: [id_produto], onDelete: Cascade, onUpdate: NoAction, map: "fk_produto_imagem")
}

model ArtigoTag {
  artigoId Int
  tagId    Int
  Artigo   Artigo @relation(fields: [artigoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Tag      Tag    @relation(fields: [tagId], references: [id_tag], onDelete: Cascade, onUpdate: NoAction)

  @@id([artigoId, tagId])
  @@index([artigoId])
  @@index([tagId])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model FavoritoArtigo {
  id_favorito_artigo Int      @id @default(autoincrement())
  data_favoritado    DateTime @default(now()) @db.Timestamptz(6)
  id_usuario         Int
  id_artigo          Int
  Artigo             Artigo   @relation(fields: [id_artigo], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_favorito_artigo_artigo")
  Usuario            Usuario  @relation(fields: [id_usuario], references: [id_usuario], onDelete: Cascade, onUpdate: NoAction, map: "fk_favorito_artigo_usuario")

  @@unique([id_usuario, id_artigo], map: "unique_usuario_artigo")
  @@index([id_artigo], map: "idx_favorito_artigo_artigo")
  @@index([data_favoritado], map: "idx_favorito_artigo_data")
  @@index([id_usuario], map: "idx_favorito_artigo_usuario")
}
